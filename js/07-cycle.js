// * ===== Cycle (Цикл) ===== * //


// * 1. Цикл for
// let index виден только внутри for
for (let i = 0; i < 10; i++) {
    // Неявно if (i < 10) { <тело цикла> }
    if (i === 3) {
        continue;
    }
    if (i === 7) {
        break;//
    }
    console.log("Итерация " + i);
    // Неявно i++
}

// ! Для отслеживания циклов можно использовать debugger !
// ! Упомянуть про область видимости ! //

// * 2. Цикл с обратным отсчётом:
for (let i = 10; i > 0; i--) {
    console.log(i);
}


// * 3. Цикл с предусловием (Когда не знаем количество итераций)
// Проверка условия, затем итерация

// Пока index не равен нулю, цикл работает
// Ноль преобразуется в булевый false

let index = 5;
while (index) {
    console.log(index);
    index--
}



// * 4. Цикл с постусловием
// Выполнилась итерация, затем проверка условия

let i = 0
do {
    console.log(i);
    i--;
} while (i > 0)



// * 5. Вложенные циклы + выход по метке

// ! выход по метке применяется крайне редко ! //

// let string = "";
// out:
// for (let i = 0; i < 10; i++) {
//     for (let j = 0; j < 10; j++) {
//         string += (i + "" + j + "\t")
//         if (i == 5 && j == 0) {
//             break out;
//         }
//     }
//     console.log(string);
//     string = "";
// }

// Вызов break/continue возможен только внутри цикла, и метка должна находиться где-то выше этой директивы.

// * 6. Бесконечные циклы (всегда могут быть прерваны break)
// 1) let run = true; while(run) {}
// 2) while(true) {}
// 3) for(;;) {}